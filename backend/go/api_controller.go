/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package shellbackend

import (
	"encoding/json"
	"net/http"
	"strings"

	_ "github.com/gorilla/mux"
)

// ControllerApiController binds http requests to an api service and writes the service results to the http response
type ControllerApiController struct {
	service      ControllerApiServicer
	errorHandler ErrorHandler
}

// ControllerApiOption for how the controller is set up.
type ControllerApiOption func(*ControllerApiController)

// WithControllerApiErrorHandler inject ErrorHandler into controller
func WithControllerApiErrorHandler(h ErrorHandler) ControllerApiOption {
	return func(c *ControllerApiController) {
		c.errorHandler = h
	}
}

// NewControllerApiController creates a default api controller
func NewControllerApiController(s ControllerApiServicer, opts ...ControllerApiOption) Router {
	controller := &ControllerApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ControllerApiController
func (c *ControllerApiController) Routes() Routes {
	return Routes{
		{
			"AddController",
			strings.ToUpper("Post"),
			"/api/v3/controller/",
			c.AddController,
		},
		{
			"GetControllers",
			strings.ToUpper("Get"),
			"/api/v3/controller/",
			c.GetControllers,
		},
	}
}

// AddController - Adds a new controller
func (c *ControllerApiController) AddController(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	usernameParam := query.Get("username")
	passwordParam := query.Get("password")
	controllerParam := Controller{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&controllerParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertControllerRequired(controllerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddController(r.Context(), usernameParam, passwordParam, controllerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetControllers - Returns a list of controllers
func (c *ControllerApiController) GetControllers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetControllers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
