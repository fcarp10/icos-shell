/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package shellbackend

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	_ "github.com/gorilla/mux"
)

// ResourceApiController binds http requests to an api service and writes the service results to the http response
type ResourceApiController struct {
	service      ResourceApiServicer
	errorHandler ErrorHandler
}

// ResourceApiOption for how the controller is set up.
type ResourceApiOption func(*ResourceApiController)

// WithResourceApiErrorHandler inject ErrorHandler into controller
func WithResourceApiErrorHandler(h ErrorHandler) ResourceApiOption {
	return func(c *ResourceApiController) {
		c.errorHandler = h
	}
}

// NewResourceApiController creates a default api controller
func NewResourceApiController(s ResourceApiServicer, opts ...ResourceApiOption) Router {
	controller := &ResourceApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ResourceApiController
func (c *ResourceApiController) Routes() Routes {
	return Routes{
		{
			"GetResourceById",
			strings.ToUpper("Get"),
			"/api/v3/resource/{resourceId}",
			c.GetResourceById,
		},
		{
			"GetResources",
			strings.ToUpper("Get"),
			"/api/v3/resource/",
			c.GetResources,
		},
	}
}

// GetResourceById - Find resource by ID
func (c *ResourceApiController) GetResourceById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceIdParam, err := parseInt64Parameter(params["resourceId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetResourceById(r.Context(), resourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetResources - Returns a list of resources
func (c *ResourceApiController) GetResources(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetResources(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
