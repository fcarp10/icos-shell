/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package shellbackend

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/spf13/viper"
)

// ControllerApiService is a service that implements the logic for the ControllerApiServicer
// This service should implement the business logic for every endpoint for the ControllerApi API.
// Include any external packages or services that will be required by this service.
type ControllerApiService struct {
}

type TimerData struct {
	timer      *time.Timer
	controller Controller
}

var timers = make(map[string]TimerData)

func DeleteController(key string) {
	fmt.Printf("Timeout, deleting controller: '%s'\n", key)
	delete(timers, key)
}

func AddController(controller Controller) bool {
	key := controller.Address
	val, exists := timers[key]
	duration := time.Second * time.Duration(viper.GetInt("controller_timeout"))
	if exists {
		val.timer.Reset(duration)
		fmt.Printf("Timer reset for controller: '%s'\n", controller.Address)
		return true
	} else {
		timer := time.NewTimer(duration)
		timers[key] = TimerData{
			timer:      timer,
			controller: controller,
		}
		fmt.Printf("Controller added: '%s'\n", controller.Address)
		// Start a goroutine to wait for the timer to expire
		go func() {
			<-timer.C
			DeleteController(key)
		}()
		return false
	}
}

func GetControllersList() []Controller {
	var controllers []Controller
	for _, value := range timers {
		controllers = append(controllers, value.controller)
	}
	return controllers
}

// NewControllerApiService creates a default api service
func NewControllerApiService() ControllerApiServicer {
	return &ControllerApiService{}
}

// AddController - Adds a new controller
func (s *ControllerApiService) AddController(ctx context.Context, username string, password string, controller Controller) (ImplResponse, error) {
	if (strings.Compare(username, viper.GetString("username")) == 0) && (strings.Compare(password, viper.GetString("password")) == 0) {
		exists := AddController(controller)
		if exists {
			return Response(202, "Controller already exists, timer has been reset"), nil
		} else {
			return Response(201, "New controller correctly added"), nil
		}
	} else {
		return Response(405, nil), errors.New("Wrong user or password")
	}
}

// GetControllers - Returns a list of controllers
func (s *ControllerApiService) GetControllers(ctx context.Context) (ImplResponse, error) {
	var controllers = GetControllersList()
	if controllers == nil {
		return Response(204, nil), nil
	} else {
		return Response(200, controllers), nil
	}
}
