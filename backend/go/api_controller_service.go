/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package shellbackend

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"
)

// ControllerApiService is a service that implements the logic for the ControllerApiServicer
// This service should implement the business logic for every endpoint for the ControllerApi API.
// Include any external packages or services that will be required by this service.
type ControllerApiService struct {
}

type TimerData struct {
	timer      *time.Timer
	controller Controller
}

var timers = make(map[string]TimerData)
var TIMEOUT = 60                           // seconds
var USER = "admin"                         // temp
var PASS = "Iki946D56!!J@gSHpuonoUyH1uB*^" // temp

func DeleteController(key string) {
	fmt.Printf("Timeout, deleting controller: '%s'\n", key)
	delete(timers, key)
}

func StartTimer(name string, controller Controller) {
	// Create a new timer
	timer := time.NewTimer(time.Second * time.Duration(TIMEOUT))
	// Store the timer in the map
	timers[name] = TimerData{
		timer:      timer,
		controller: controller,
	}
	// Start a goroutine to wait for the timer to expire
	go func() {
		<-timer.C
		DeleteController(name)
	}()
}

func GetControllersList() []Controller {
	var controllers []Controller
	for _, value := range timers {
		controllers = append(controllers, value.controller)
	}
	return controllers
}

// NewControllerApiService creates a default api service
func NewControllerApiService() ControllerApiServicer {
	return &ControllerApiService{}
}

// AddController - Adds a new controller
func (s *ControllerApiService) AddController(ctx context.Context, username string, password string, controller Controller) (ImplResponse, error) {
	// TODO - update AddController with the required logic for this service method.
	// Add api_controller_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	if (strings.Compare(username, USER) == 0) && (strings.Compare(password, PASS) == 0) {
		StartTimer(controller.Name, controller)
		return Response(201, "Controller correctly added"), nil
	} else {
		return Response(405, nil), errors.New("Wrong user or password")
	}

	// return Response(http.StatusNotImplemented, nil), errors.New("AddController method not implemented")
}

// GetControllers - Returns a list of controllers
func (s *ControllerApiService) GetControllers(ctx context.Context) (ImplResponse, error) {
	// TODO - update GetControllers with the required logic for this service method.
	// Add api_controller_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	var controllers = GetControllersList()
	if controllers == nil {
		return Response(200, map[string]string{"msg": "No controllers in the lighthouse"}), nil
	} else {
		return Response(200, controllers), nil
	}
	// return Response(http.StatusNotImplemented, nil), errors.New("GetControllers method not implemented")
}
