/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package shellbackend

import (
	"context"
	"net/http"
)



// DefaultApiRouter defines the required methods for binding the api requests to a responses for the DefaultApi
// The DefaultApiRouter implementation should parse necessary information from the http request,
// pass the data to a DefaultApiServicer to perform the required actions, then write the service results to the http response.
type DefaultApiRouter interface { 
	GetHealthcheck(http.ResponseWriter, *http.Request)
}
// DeploymentApiRouter defines the required methods for binding the api requests to a responses for the DeploymentApi
// The DeploymentApiRouter implementation should parse necessary information from the http request,
// pass the data to a DeploymentApiServicer to perform the required actions, then write the service results to the http response.
type DeploymentApiRouter interface { 
	CreateDeployment(http.ResponseWriter, *http.Request)
	DeleteDeploymentById(http.ResponseWriter, *http.Request)
	GetDeploymentById(http.ResponseWriter, *http.Request)
	GetDeployments(http.ResponseWriter, *http.Request)
	UpdateDeployment(http.ResponseWriter, *http.Request)
}
// ResourceApiRouter defines the required methods for binding the api requests to a responses for the ResourceApi
// The ResourceApiRouter implementation should parse necessary information from the http request,
// pass the data to a ResourceApiServicer to perform the required actions, then write the service results to the http response.
type ResourceApiRouter interface { 
	GetResourceById(http.ResponseWriter, *http.Request)
	GetResources(http.ResponseWriter, *http.Request)
}
// UserApiRouter defines the required methods for binding the api requests to a responses for the UserApi
// The UserApiRouter implementation should parse necessary information from the http request,
// pass the data to a UserApiServicer to perform the required actions, then write the service results to the http response.
type UserApiRouter interface { 
	LoginUser(http.ResponseWriter, *http.Request)
	LogoutUser(http.ResponseWriter, *http.Request)
}


// DefaultApiServicer defines the api actions for the DefaultApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DefaultApiServicer interface { 
	GetHealthcheck(context.Context) (ImplResponse, error)
}


// DeploymentApiServicer defines the api actions for the DeploymentApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DeploymentApiServicer interface { 
	CreateDeployment(context.Context, CreateDeploymentRequest) (ImplResponse, error)
	DeleteDeploymentById(context.Context, int64) (ImplResponse, error)
	GetDeploymentById(context.Context, int64) (ImplResponse, error)
	GetDeployments(context.Context) (ImplResponse, error)
	UpdateDeployment(context.Context, int64, CreateDeploymentRequest) (ImplResponse, error)
}


// ResourceApiServicer defines the api actions for the ResourceApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ResourceApiServicer interface { 
	GetResourceById(context.Context, int64) (ImplResponse, error)
	GetResources(context.Context) (ImplResponse, error)
}


// UserApiServicer defines the api actions for the UserApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserApiServicer interface { 
	LoginUser(context.Context, string, string) (ImplResponse, error)
	LogoutUser(context.Context) (ImplResponse, error)
}
