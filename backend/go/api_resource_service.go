/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package shellbackend

import (
	"context"
	"errors"
	"net/http"

	"github.com/spf13/viper"
)

// ResourceAPIService is a service that implements the logic for the ResourceAPIServicer
// This service should implement the business logic for every endpoint for the ResourceAPI API.
// Include any external packages or services that will be required by this service.
type ResourceAPIService struct {
}

// NewResourceAPIService creates a default api service
func NewResourceAPIService() ResourceAPIServicer {
	return &ResourceAPIService{}
}

// GetResourceById - Find resource by ID
func (s *ResourceAPIService) GetResourceById(ctx context.Context, resourceId int64) (ImplResponse, error) {
	// TODO - update GetResourceById with the required logic for this service method.
	// Add api_resource_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Resource{}) or use other options such as http.Ok ...
	// return Response(200, Resource{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetResourceById method not implemented")
}

// GetResources - Returns a list of resources
func (s *ResourceAPIService) GetResources(ctx context.Context, apiKey string) (ImplResponse, error) {
	req, _ := http.NewRequestWithContext(ctx, "GET", viper.GetString("components.aggregator.server")+viper.GetString("components.aggregator.path"), nil)
	req = prepareToken(ctx, apiKey, req)
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return errorConnect(resp, err)
	} else {
		if resp.StatusCode == 200 {
			return Response(resp.StatusCode, unmarshalResponse(resp)), nil
		} else {
			return unexpectedCode(resp.StatusCode)
		}
	}
}
