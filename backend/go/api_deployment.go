/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package shellbackend

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DeploymentAPIController binds http requests to an api service and writes the service results to the http response
type DeploymentAPIController struct {
	service DeploymentAPIServicer
	errorHandler ErrorHandler
}

// DeploymentAPIOption for how the controller is set up.
type DeploymentAPIOption func(*DeploymentAPIController)

// WithDeploymentAPIErrorHandler inject ErrorHandler into controller
func WithDeploymentAPIErrorHandler(h ErrorHandler) DeploymentAPIOption {
	return func(c *DeploymentAPIController) {
		c.errorHandler = h
	}
}

// NewDeploymentAPIController creates a default api controller
func NewDeploymentAPIController(s DeploymentAPIServicer, opts ...DeploymentAPIOption) Router {
	controller := &DeploymentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DeploymentAPIController
func (c *DeploymentAPIController) Routes() Routes {
	return Routes{
		"CreateDeployment": Route{
			strings.ToUpper("Post"),
			"/api/v3/deployment/",
			c.CreateDeployment,
		},
		"DeleteDeploymentById": Route{
			strings.ToUpper("Delete"),
			"/api/v3/deployment/{deploymentId}",
			c.DeleteDeploymentById,
		},
		"GetDeploymentById": Route{
			strings.ToUpper("Get"),
			"/api/v3/deployment/{deploymentId}",
			c.GetDeploymentById,
		},
		"GetDeployments": Route{
			strings.ToUpper("Get"),
			"/api/v3/deployment/",
			c.GetDeployments,
		},
		"UpdateDeployment": Route{
			strings.ToUpper("Put"),
			"/api/v3/deployment/{deploymentId}",
			c.UpdateDeployment,
		},
	}
}

// CreateDeployment - Creates a new deployment
func (c *DeploymentAPIController) CreateDeployment(w http.ResponseWriter, r *http.Request) {
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.CreateDeployment(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteDeploymentById - Deletes a deployment
func (c *DeploymentAPIController) DeleteDeploymentById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deploymentIdParam, err := parseNumericParameter[int64](
		params["deploymentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteDeploymentById(r.Context(), deploymentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDeploymentById - Find deployment by ID
func (c *DeploymentAPIController) GetDeploymentById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deploymentIdParam, err := parseNumericParameter[int64](
		params["deploymentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetDeploymentById(r.Context(), deploymentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDeployments - Returns a list of deployments
func (c *DeploymentAPIController) GetDeployments(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDeployments(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDeployment - Updates a deployment
func (c *DeploymentAPIController) UpdateDeployment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deploymentIdParam, err := parseNumericParameter[int64](
		params["deploymentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.UpdateDeployment(r.Context(), deploymentIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
