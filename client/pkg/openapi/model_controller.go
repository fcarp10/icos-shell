/*
ICOS Shell

This is the ICOS Shell based on the OpenAPI 3.0 specification.

API version: 1.0.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Controller type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Controller{}

// Controller struct for Controller
type Controller struct {
	// Name of the controller
	Name string `json:"name"`
	// IP address of the controller
	Address string `json:"address"`
}

// NewController instantiates a new Controller object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewController(name string, address string) *Controller {
	this := Controller{}
	this.Name = name
	this.Address = address
	return &this
}

// NewControllerWithDefaults instantiates a new Controller object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllerWithDefaults() *Controller {
	this := Controller{}
	return &this
}

// GetName returns the Name field value
func (o *Controller) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Controller) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Controller) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *Controller) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Controller) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Controller) SetAddress(v string) {
	o.Address = v
}

func (o Controller) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Controller) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["address"] = o.Address
	return toSerialize, nil
}

type NullableController struct {
	value *Controller
	isSet bool
}

func (v NullableController) Get() *Controller {
	return v.value
}

func (v *NullableController) Set(val *Controller) {
	v.value = val
	v.isSet = true
}

func (v NullableController) IsSet() bool {
	return v.isSet
}

func (v *NullableController) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableController(val *Controller) *NullableController {
	return &NullableController{value: val, isSet: true}
}

func (v NullableController) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableController) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


