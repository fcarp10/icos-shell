/*
ICOS Shell

Testing ControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"log"
	openapiclient "shellclient/pkg/openapi"
	"testing"

	"github.com/spf13/viper"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_ControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ControllerAPIService AddController", func(t *testing.T) {

		viper.SetConfigType("env")       // treating the file like an .env file
		viper.SetConfigFile("token.txt") // Read the config file
		if err := viper.ReadInConfig(); err != nil {
			log.Fatalf("Error reading config file: %s", err)
		}
		// Get the whole string
		tokenRaw := viper.GetString("ICOS_AUTH_TOKEN")

		// Extract the token from the raw string, otherwise it can not be passed as a httpReq
		token := tokenRaw[1 : len(tokenRaw)-2]
		// t.Skip("skip test") // remove to run test

		controller := *openapiclient.NewController("name_test", "address_test")

		httpRes, err := apiClient.ControllerAPI.AddController(context.Background()).ApiKey(token).Controller(controller).Execute()

		require.Nil(t, err)
		assert.Equal(t, 201, httpRes.StatusCode)

	})

	t.Run("Test ControllerAPIService GetControllers", func(t *testing.T) {

		// t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ControllerAPI.GetControllers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
