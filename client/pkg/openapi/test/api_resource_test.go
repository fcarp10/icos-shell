/*
ICOS Shell

Testing ResourceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"fmt"
	"log"
	"testing"

	openapi "shellclient/pkg/openapi"

	"github.com/spf13/viper"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_ResourceApiService(t *testing.T) {

	configuration := openapi.NewConfiguration()
	apiClient := openapi.NewAPIClient(configuration)

	t.Run("Test ResourceApiService GetResourceById", func(t *testing.T) {

		/*
			This functionality is not correctly implemented in the ICOS system and in the shell backend yet
		*/
		t.Skip("skip test") // remove to run test

		// Read in the Token
		viper.SetConfigFile("../../../config_client.yml") // Read the config file
		viper.AddConfigPath(".")                          // look for config in the working directory

		if err := viper.ReadInConfig(); err != nil {
			log.Fatalf("Error reading config file: %s", err)
		}
		tokenRaw := viper.GetString("auth_token")

		// Extract the token from the raw string, otherwise it can not be passed as a httpReq
		token := tokenRaw[1 : len(tokenRaw)-2]
		fmt.Println(token)
		var resourceId int64

		// add this in the following argument to the next line, if the backend is implemented: ApiKey(token)
		resp, httpRes, err := apiClient.ResourceAPI.GetResourceById(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiService GetResources", func(t *testing.T) {

		/*
			This functionality is not correctly implemented in the ICOS system
		*/
		// t.Skip("skip test") // remove to run test

		// Read in the Token
		viper.SetConfigFile("../../../config_client.yml") // Read the config file
		viper.AddConfigPath(".")                          // look for config in the working directory

		if err := viper.ReadInConfig(); err != nil {
			log.Fatalf("Error reading config file: %s", err)
		}
		tokenRaw := viper.GetString("auth_token")

		// Extract the token from the raw string, otherwise it can not be passed as a httpReq
		token := tokenRaw[1 : len(tokenRaw)-2]

		resp, httpRes, err := apiClient.ResourceAPI.GetResources(context.Background()).ApiKey(token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
